apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.0"

    defaultConfig {
        applicationId "info.bpace.munchlife"
        minSdkVersion 19
        targetSdkVersion 19
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    dependencies {




        // Robolectric
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.robolectric:robolectric:3.5.1'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.3.1'
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

android {
    buildTypes {
        debug { testCoverageEnabled = true } } }
apply plugin: 'jacoco'
jacoco { toolVersion = "0.7.7.201606060606"}
def fileFilter = [
        'com/androidjacoco/sample/**/view/**.*',
        '**/R.class', '**/R$*.class', '**/BuildConfig.*',
        '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"
task customJacocoTestReport(type: JacocoReport, dependsOn: 'test') {

    reports {
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
    }

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
